continue
session[:telegram_id]
continue
params[:hash]
params[:id]
params
continue
exit
(40.2 - 40.1).abs
(40.1 - 40).abs
40.1 - 40
valid_team
next
@players.count
next
result.first.count
result
result.count
valid_team.count
valid_team
@players.count
next
valid_team.count
valid_team
next
valid_team.count
valid_team 
exit
next
valid_team
next
result.count
next
avrg
next
avrg
next
team_size
next
@players.count
@players
next
@players
@player
exit
valid_team.sum(&:rating)
@players
next
@players
@players.count
next
valid_team.sum(&:rating)
valid_team.
next
@players.count
@player.count
next
@players.count
@players
valid_team.sum(&:rating)
valid_team.sum(&:sum)
valid_team.class
valid_team.count
valid_team
exit
exut
@players.to_a.combination(3).find_all {|team| team.sum(&:rating) == 15.5 }.count
@players.to_a.combination(3).find_all {|team| team.sum(&:rating) == 15.5 }.sample
@players.to_a.combination(5).find(120).first.sum(&:rating)
@players.to_a.combination(5).find(120).first
@players.to_a.combination(5).find(120).class
@players.to_a.combination(5).find(120)
@players.to_a.combination(5).find(120).sum(&:rating)
@players.to_a.combination(5).last.sum(&:rating)
@players.to_a.combination(5).first.sum(&:rating)
@players.to_a.combination(5).first.sum(&:sum)
@players.to_a.combination(5).first
@players.to_a.combination(5).count
valid_team = @players.to_a.combination(5).find_all { |arr| arr.sum(&:rating) == 15 }.sample
valid_team = @players.to_a.combination(5).find_all { |arr| arr.sum(&:rating) == 15.5 }.sample
@players.sum(&:rating) / 3
@players.sum(&:rating)
@players = @venue.players
team_s = @players.count / teams_count
@venue.players.to_a.first
@venue.players.to_a
@venue.players.first(2)
arr = PlayerServices::DivideToTeams.new(@venue, teams_count, players_count).call
@venue.players.first
@venue.players.last
@venue.players.joins(:games).last
@venue.players.joins(:games).first
@venue.players.joins(:games).count
@venue.players.joins(:games).order('game.create_at').all
@venue.players.joins(:games).order('game.create_at').first
@venue.players.joins(:games).order('game.create_at')
exit
@venue.players.joins(:games).order('game.create_at')
@venue.players.joins(:games).order('games.create_at')
@venue.players.joins(:games).order('games.create_at').first
@venue.players.joins(:games).order('games.create_at').count
@venue.players.joins(:games).order('games.create_at')
@venue.players.joins(:games)
@venue.players.count.joins(:games)
@venue.players.count
@venue.players
@venue
arr.count
arr.coubt
arr = PlayerServices::DivideToTeams.new(@venue, teams_count, players_count).call
exit
players_count
arr
arr.count
arr.first
arr = PlayerServices::DivideToTeams.new(@venue, teams_count, players_count).call
PlayerServices::DivideToTeams.new(@venue, teams_count, players_count).call
exit
PlayerServices::DivideToTeams.new(@venue, teams_count, players_count).call
exit
PlayerServices::DivideToTeams.new(@venue, teams_count, players_count).call
exit
PlayerServices::DivideToTeams.new(@venue, teams_count, players_count).call
dtt = PlayerServices::DivideToTeams.new(venue: @venue, teams_count: teams_count, players_count: players_count)
PlayerServices::DivideToTeams.new(venue: @venue, teams_count: teams_count, players_count: players_count).call
DivideToTeams.new(venue: @venue, teams_count: teams_count, players_count: players_count).call
exit
DivideToTeams.new(venue: @venue, teams_count: teams_count, players_count: players_count).call
players_count
continue
config
continue
config
continue
session[:venue_id]
friend_data
session[:friend_id]
continue
session[:venue_id]
session[:friend_id]
@venue.players.last
@venue.players.where(friend_id: from['id'])
@venue.players.count
@venue.players
from['id']
from[:id]
@venue
@player
continue
next
from['id']
exit
session["date"]
session[:date]
session["venue_id"]
session[:venue_id]
from["id"]
from[:id]
from
